{"prompt":"Report on expalinable_ai\n\n###\n\n","completion":" \nTo Understand Apply  Explainable  AI tools.  \n \n \nTool 1: AIX360  \nPre-Processing  \nFor GLRM predict medical expenses person. So  Medical expenses act \nour Target Variable rest variables act features.  \nWe split data training testing data.  \n \n \n As seen histogram, conclude Health Expenditure values Right Tailed. \nSo know people spend lot healthcare \nlabeled “High Cost Patients”.  \n \nThe distribution long heavy tail consisting high -cost individuals. This manifests \nin  mean five times median , standard deviation three times mean , \nand costly individuals running hundreds thousands dollars.  \n \nAfter spli tting data training testing parts, take categorical features used \nprediction.  \nThe two algorithms LinRR BRCG (Boolean Rule Column Generator) require non -binary \nfeatures binarized using provided FeatureBinarizer  class. W e list features \nconsidered categorical, use default 9 quantile thresholds (i.e. 10 bins) binarize ordinal \n(including continuous -valued) features, include negations (e.g. '>' comparisons well '<='), \nand also return stan dardized versions original unbinarized ordinal features, used \nby LinRR BRCG.  \n \n \n \nFeature Binarizer: Binarize data (set feature values 0 1) according threshold.  \nValues greater threshold map 1, values les equal threshold map \n0. With default threshold 0, positive values map 1. This required step \nestimators use boolean random variables.  \nLinear Rule Regression: It regression model uses rule based fea tures, parameters \nas lambda0 lambda1 used penalize number rules used model.  \nBaseline:  \n We consider baseline model works complexity. General Gradient \nBoosting Regressor works well prediction continuous values. We use  \ndata binarized.  \n \nThe value R^2 Training 51%  value R^2 Testing 13%. There huge \ndifference training testing values R2 score. This indicates Overfitting.  \nMoreover, R2 score Testing 13% indicates problem complex \ndifficult explai n.  \nGeneralized Linear Rule Models (GLRM)  \nWe use Linear Rule Regression problem predicting healthcare expenditure \n"}
{"prompt":"Report on prolog_covid_support\n\n###\n\n","completion":"1 \n AI Evaluation – III \nMedical Expert System - Covid -19 \n \n \n \n \n \n \n \n \nSubmitted –  \nGroup 5 \nTejas Kumar  2203024055  \nNitish Jha  22030242068  \n \n  \n 2 \n Abstract  \nThe provided prolog file Expert System COVID -19 diagnosis. It allows user \ninput symptoms, check symptoms, perform temperature check, perform checkup \ndiagnose patient COVID -19. The provided  report highlights main predicates  \nthe program highlights meant  module.  \nAim report provide understanding expert system predicates used \nit. The report two section s, first section contains predicate clauses  code \nsnippets provide explanation , second section showcases exploration \nfeatures provide ES .   \nThe Expert System derived GitHub repository Rojay White , credits \nwork goes him. As per instructions mentioned Read.md repository Moh Project \nfile used.  \n   3 \n Section 1: Predicates  Clauses Explan ation  \nPost making code executable Prolog following 12 predicates identified  \ndynamic(symptom\/1).  \nIn Prolog, dynamic\/1 Prolog provides powerful mechanism dynamically modifying \npredicate database runtime, useful wide range applications, including \nmedical diagnosis systems, expert systems, natural language processing systems.  Its \nintended use program interact assert retract systems. Which would \nallowed  \nSymptom\/1 predicate name predicate want make dynamic, arity \nnumber arguments predicate takes.  \nFor example, suppose predicate called symptom\/2 represents symptom \nits severity. You make predicate dynamic using dynamic\/1 predicate like this:  \ndynamic (symptom\/2 ). \nsymptom(none).  \nIt predicate fact, indicates recorded symptoms \npatient.  \nmenu.  \nThe menu clause program stated GUI component. In giv en code, menu \na Prolog predicate displays list options user prompts choice. The user's \nchoice used execute corresponding action calling another predicate.  \nThe menu predicate defined using Prolog's built -in write read predicates display text \nand read input user. It uses series conditional statements (using ->) check \nuser's choice execute ap"}
